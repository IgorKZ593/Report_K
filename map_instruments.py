#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
map_instruments.py ‚Äî –≠—Ç–∞–ø 1.
–ö–∞—Ä–∫–∞—Å: –ø–æ–∏—Å–∫ –≤—Ö–æ–¥–Ω–æ–≥–æ JSON isin_–§–∞–º–∏–ª–∏—è –ò.–û._start__end.json –≤ Data_work,
—á—Ç–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è, –ø–µ—á–∞—Ç—å —Å—Ç–∞—Ç—É—Å–∞. –ù–∏–∫–∞–∫–æ–π –ª–æ–≥–∏–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤/–∑–∞–ø–∏—Å–∏ –Ω–∞ –¥–∏—Å–∫.
"""

import os
import sys
import json
import re
from glob import glob
from pathlib import Path
from typing import Tuple, List, Dict, Any, Optional

# === –ê–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ rich –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ ===
try:
    from rich.console import Console
    from rich import print
except ImportError:
    os.system(f'"{sys.executable}" -m pip install rich')
    from rich.console import Console
    from rich import print

console = Console()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø—É—Ç–µ–π (—Å–ª–µ–¥—É–µ–º –ø—Ä–∏–Ω—è—Ç–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø—Ä–æ–µ–∫—Ç–∞)
BASE_DIR = r"F:\Python Projets\Report"
DATA_WORK = BASE_DIR + r"\Data_work"

# –ü—É—Ç–∏ –∫ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞–º
REF_STOCKS_XLSX = r"F:\Python Projets\Report\dictionaries\reference_stocks\reference_stocks_etf.xlsx"
REF_BONDS_XLSX  = r"F:\Python Projets\Report\dictionaries\reference_bonds\reference_bonds.xlsx"
REF_SP_XLSX     = r"F:\Python Projets\Report\dictionaries\reference_structured\TS\TS.xlsx"
REF_SP_PDF_DIR  = r"F:\Python Projets\Report\dictionaries\reference_structured\TS"

# ---------- –£—Ç–∏–ª–∏—Ç—ã ----------

def parse_payload_name_from_filename(path: Path) -> Tuple[str, str, str]:
    """
    –ò–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –≤–∏–¥–∞:
      isin_–§–∞–º–∏–ª–∏—è –ò.–û._DD.MM.YYYY__DD.MM.YYYY.json
    –∏–∑–≤–ª–µ–∫–∞–µ—Ç (client_str, start_date, end_date).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
    """
    name = path.name
    # –ñ—ë—Å—Ç–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —à–∞–±–ª–æ–Ω—É
    m = re.fullmatch(r"isin_(.+)_(\d{2}\.\d{2}\.\d{4})__(\d{2}\.\d{2}\.\d{4})\.json", name)
    if not m:
        raise ValueError(f"–ò–º—è —Ñ–∞–π–ª–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —à–∞–±–ª–æ–Ω—É: {name}")
    client_str, start_date, end_date = m.group(1), m.group(2), m.group(3)
    return client_str, start_date, end_date


def load_client_isins(path: Path) -> Tuple[str, Dict[str, str], List[str]]:
    """
    –ß–∏—Ç–∞–µ—Ç –≤—Ö–æ–¥–Ω–æ–π JSON –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      client: —Å—Ç—Ä–æ–∫–∞ –∏–∑ JSON (–∫–∞–∫ –µ—Å—Ç—å)
      period: —Å–ª–æ–≤–∞—Ä—å {"start_date": "...", "end_date": "..."}
      isin_list: —Å–ø–∏—Å–æ–∫ ISIN
    –ë—Ä–æ—Å–∞–µ—Ç –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å —á—Ç–µ–Ω–∏–µ–º/—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π.
    """
    try:
        with path.open("r", encoding="utf-8") as f:
            data = json.load(f)
    except FileNotFoundError:
        raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
    except json.JSONDecodeError as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ {path}: {e}")

    if not isinstance(data, dict):
        raise ValueError("–û–∂–∏–¥–∞–ª—Å—è –æ–±—ä–µ–∫—Ç JSON –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è")

    client = data.get("client")
    period = data.get("period")
    isins = data.get("isin")

    if not isinstance(client, str) or not client.strip():
        raise ValueError("–ü–æ–ª–µ 'client' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–µ")

    if not isinstance(period, dict) or "start_date" not in period or "end_date" not in period:
        raise ValueError("–ü–æ–ª–µ 'period' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω–æ–µ")

    if not isinstance(isins, list) or not all(isinstance(x, str) for x in isins):
        raise ValueError("–ü–æ–ª–µ 'isin' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º —Å—Ç—Ä–æ–∫")

    return client, {"start_date": period["start_date"], "end_date": period["end_date"]}, isins


def find_input_payload(data_work: str) -> Path:
    """
    –ò—â–µ—Ç —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ñ–∞–π–ª –ø–æ –º–∞—Å–∫–µ isin_*.json –≤ DATA_WORK.
    0 ‚Äî –æ—à–∏–±–∫–∞; >1 ‚Äî –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å –∏ –æ—à–∏–±–∫–∞; –∏–Ω–∞—á–µ –≤–µ—Ä–Ω—É—Ç—å Path.
    """
    pattern = os.path.join(data_work, "isin_*.json")
    files = [Path(p) for p in glob(pattern)]
    if not files:
        console.print(f"[red]‚ùå –í–æ –≤—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–µ [/red][bright_cyan]{data_work}[/bright_cyan][red] –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –ø–æ –º–∞—Å–∫–µ isin_*.json[/red]")
        sys.exit(1)
    if len(files) > 1:
        console.print(f"[red]‚ùå –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –ø–æ –º–∞—Å–∫–µ –≤ [/red][bright_cyan]{data_work}[/bright_cyan][red]:[/red]")
        for p in files:
            console.print(f"[bright_cyan]  - {p.name}[/bright_cyan]")
        sys.exit(1)
    return files[0]

# === –ê–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ openpyxl ===
try:
    from openpyxl import load_workbook
except ImportError:
    os.system(f'"{sys.executable}" -m pip install openpyxl')
    from openpyxl import load_workbook


def _norm_isin(s: str) -> str:
    return (s or "").strip().upper()


def load_reference_stocks(xlsx_path: str) -> dict:
    """
    –õ–∏—Å—Ç: '–∞–∫—Ü–∏–∏_etf'
    –ö–æ–ª–æ–Ω–∫–∏: A=ISIN, B=–¢–∏–∫–µ—Ä, C=–ù–∞–∑–≤–∞–Ω–∏–µ, D=–¢–∏–ø
    –í–æ–∑–≤—Ä–∞—Ç: { ISIN: {"ticker": str, "type": str, "name": str} }
    """
    wb = load_workbook(xlsx_path, read_only=True, data_only=True)
    if "–∞–∫—Ü–∏–∏_et—Ñ" in wb.sheetnames:
        ws = wb["–∞–∫—Ü–∏–∏_et—Ñ"]
    else:
        ws = wb["–∞–∫—Ü–∏–∏_etf"]  # –Ω–∞ —Å–ª—É—á–∞–π –æ–ø–µ—á–∞—Ç–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞/—Ä–∞—Å–∫–ª–∞–¥–∫–∏
    ref = {}
    # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞)
    for row in ws.iter_rows(min_row=2, values_only=True):
        isin, ticker, name, typ = row[:4]
        isin = _norm_isin(isin)
        if not isin:
            continue
        ref[isin] = {
            "ticker": (ticker or "").strip(),
            "type": (typ or "").strip(),
            "name": (name or "").strip(),
        }
    return ref


def load_reference_bonds(xlsx_path: str) -> dict:
    """
    –õ–∏—Å—Ç: 'bonds'
    –ö–æ–ª–æ–Ω–∫–∏: A=ISIN, B=–ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    –í–æ–∑–≤—Ä–∞—Ç: { ISIN: {"name": str} }
    """
    wb = load_workbook(xlsx_path, read_only=True, data_only=True)
    ws = wb["bonds"]
    ref = {}
    for row in ws.iter_rows(min_row=2, values_only=True):
        isin, name = row[:2]
        isin = _norm_isin(isin)
        if not isin:
            continue
        ref[isin] = {"name": (name or "").strip()}
    return ref


def load_reference_structured(xlsx_path: str, pdf_dir: str) -> dict:
    """
    –õ–∏—Å—Ç: 'TS'
    –ö–æ–ª–æ–Ω–∫–∏: B=ISIN, C=—Å—Å—ã–ª–∫–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –Ω–∞—Å)
    –í–æ–∑–≤—Ä–∞—Ç: { ISIN: {"pdf_path": <str|None>} }
    PDF —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é—Ç—Å—è –≤ pdf_dir –∏ –∏–º–µ–Ω—É—é—Ç—Å—è '<ISIN>.pdf'
    """
    wb = load_workbook(xlsx_path, read_only=True, data_only=True)
    ws = wb["TS"]
    ref = {}
    for row in ws.iter_rows(min_row=2, values_only=True):
        # row: (N, ISIN, LINK, ...)
        _, isin, _ = (row + (None,))[:3]
        isin = _norm_isin(isin)
        if not isin:
            continue
        pdf_path = os.path.join(pdf_dir, f"{isin}.pdf")
        ref[isin] = {"pdf_path": pdf_path if os.path.isfile(pdf_path) else None}
    return ref

# ---------- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ----------

def main(argv: Optional[List[str]] = None) -> int:
    try:
        console.print("[bold green]üß≠ map_instruments ‚Äî –≠—Ç–∞–ø 1 (–∫–∞—Ä–∫–∞—Å)[/bold green]")
        console.print(f"[bright_cyan]–ü–æ–∏—Å–∫ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤: {DATA_WORK}[/bright_cyan]")

        input_path = find_input_payload(DATA_WORK)

        # –ò–º—è —Ñ–∞–π–ª–∞ ‚Üí –æ–∂–∏–¥–∞–µ–º—ã–µ client/start/end (–ø–æ –∏–º–µ–Ω–∏)
        client_from_name, start_from_name, end_from_name = parse_payload_name_from_filename(input_path)

        console.print(f"[green]‚úÖ –ù–∞–π–¥–µ–Ω –≤—Ö–æ–¥–Ω–æ–π JSON: [/green][bright_cyan]{input_path.name}[/bright_cyan]")
        console.print(f"[green]‚Ü≥ –û–∂–∏–¥–∞–µ—Ç—Å—è –∏–∑ –∏–º–µ–Ω–∏: client=[/green][bright_cyan]{client_from_name}[/bright_cyan][green], "
                      f"period=[/green][bright_cyan]{start_from_name}..{end_from_name}[/bright_cyan]")

        # –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ JSON
        client, period, isins = load_client_isins(input_path)
        console.print(f"[green]‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω JSON. –ö–ª–∏–µ–Ω—Ç:[/green] [bright_cyan]{client}[/bright_cyan]")
        console.print(f"[green]‚Ü≥ –ü–µ—Ä–∏–æ–¥:[/green] [bright_cyan]{period['start_date']}..{period['end_date']}[/bright_cyan]")
        console.print(f"[green]‚Ü≥ –ö–æ–ª-–≤–æ ISIN:[/green] [bright_cyan]{len(isins)}[/bright_cyan]")

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ, –±–µ–∑ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è)
        console.print(f"[green]üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤‚Ä¶[/green]")
        console.print(f"[green]‚Ü≥ Stocks/ETF:[/green] [bright_cyan]{REF_STOCKS_XLSX}[/bright_cyan]")
        stocks = load_reference_stocks(REF_STOCKS_XLSX)
        console.print(f"[green]   –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:[/green] [bright_cyan]{len(stocks)}[/bright_cyan]")

        console.print(f"[green]‚Ü≥ Bonds:[/green] [bright_cyan]{REF_BONDS_XLSX}[/bright_cyan]")
        bonds = load_reference_bonds(REF_BONDS_XLSX)
        console.print(f"[green]   –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:[/green] [bright_cyan]{len(bonds)}[/bright_cyan]")

        console.print(f"[green]‚Ü≥ Structured (TS):[/green] [bright_cyan]{REF_SP_XLSX}[/bright_cyan]")
        structured = load_reference_structured(REF_SP_XLSX, REF_SP_PDF_DIR)
        console.print(f"[green]   –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:[/green] [bright_cyan]{len(structured)}[/bright_cyan]")

        console.print("[yellow]–≠—Ç–∞–ø 2 –∑–∞–≤–µ—Ä—à—ë–Ω: —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –ø–∞–º—è—Ç—å. –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —ç—Ç–∞–ø–µ.[/yellow]")
        return 0

    except KeyboardInterrupt:
        console.print("\n[red]–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º[/red]")
        return 1
    except Exception as e:
        console.print(f"[red]‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}[/red]")
        return 1


if __name__ == "__main__":
    sys.exit(main())
