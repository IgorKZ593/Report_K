# robust runner for map_instruments.py (PowerShell 5+/7+)
$OutputEncoding = [Console]::OutputEncoding = [Text.UTF8Encoding]::new()

Write-Host "`nüß≠ –ó–∞–ø—É—Å–∫ map_instruments..." -ForegroundColor Cyan

# –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: –∫–æ—Ä–µ–Ω—å = –¥–≤–∞ —É—Ä–æ–≤–Ω—è –≤–≤–µ—Ä—Ö –æ—Ç scripts/PS1
$repoRoot  = Resolve-Path "$PSScriptRoot\..\.."
$python    = $null
$script    = Join-Path $repoRoot "map_instruments.py"

# –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è
if (-not (Test-Path $script)) {
  Write-Host "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª: $script" -ForegroundColor Red
  exit 1
}

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º Python –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä
# 1) –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω venv ‚Äî –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ 'python'
# 2) –∏–Ω–∞—á–µ –ø—Ä–æ–±—É–µ–º py -3.10/3.11, –∑–∞—Ç–µ–º –ø—Ä–æ—Å—Ç–æ py
function Test-Exe($cmd) { & $cmd --version *> $null; if ($LASTEXITCODE -eq 0) { return $true } return $false }

if (Test-Exe "python")       { $python = "python" }
elseif (Test-Exe "py -3.10") { $python = "py -3.10" }
elseif (Test-Exe "py -3.11") { $python = "py -3.11" }
elseif (Test-Exe "py")       { $python = "py" }
else {
  Write-Host "‚ùå Python –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python –∏–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ venv." -ForegroundColor Red
  exit 1
}

# –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Å–∫—Ä–∏–ø—Ç—É (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è)
Write-Host "‚ñ∂ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä: $python" -ForegroundColor DarkGray
Write-Host "‚ñ∂ –°–∫—Ä–∏–ø—Ç:        $script" -ForegroundColor DarkGray
Write-Host "‚ñ∂ –ê—Ä–≥—É–º–µ–Ω—Ç—ã:     $args"   -ForegroundColor DarkGray

& $python $script @args
$code = $LASTEXITCODE

if ($code -eq 0) {
  Write-Host "`n‚úÖ map_instruments –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ." -ForegroundColor Green
} else {
  Write-Host "`n‚ùå map_instruments –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º: $code" -ForegroundColor Red
}
exit $code
