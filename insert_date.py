import os
import sys
import json
import datetime
import holidays

# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π –∏ –∞–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö
try:
    from prompt_toolkit import PromptSession
    from prompt_toolkit.key_binding import KeyBindings
    from prompt_toolkit.application import get_app_or_none
except ImportError:
    print("[bold yellow]–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é prompt_toolkit –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞...[/bold yellow]")
    os.system(f'"{sys.executable}" -m pip install prompt_toolkit')
    from prompt_toolkit import PromptSession
    from prompt_toolkit.key_binding import KeyBindings
    from prompt_toolkit.application import get_app_or_none

try:
    from rich import print
except ImportError:
    print("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é rich –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞...")
    os.system(f'"{sys.executable}" -m pip install rich')
    from rich import print

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –≤–Ω–µ—à–Ω–∏—Ö –º–æ–¥—É–ª–µ–π
REQUIRED_MODULES = ["holidays", "rich"]
for mod in REQUIRED_MODULES:
    try:
        __import__(mod)
    except ImportError:
        print(f"[bold red]–ú–æ–¥—É–ª—å '{mod}' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ: pip install {mod}[/bold red]")
        sys.exit(1)

# –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–∞–º–∏, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
json_path = os.path.join("Data_work", "report_dates.json")
if os.path.exists(json_path):
    try:
        os.remove(json_path)
    except Exception:
        pass

def print_welcome():
    print("[bold green]–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ N1 Broker[/bold green]")

def is_weekend(date_obj):
    return date_obj.weekday() >= 5

def is_us_holiday(date_obj, holidays_us):
    return date_obj in holidays_us

def find_nearest_valid_dates(date_obj, min_date, holidays_us):
    before = date_obj - datetime.timedelta(days=1)
    after = date_obj + datetime.timedelta(days=1)
    while before >= min_date:
        if not is_weekend(before) and not is_us_holiday(before, holidays_us):
            break
        before -= datetime.timedelta(days=1)
    while True:
        if not is_weekend(after) and not is_us_holiday(after, holidays_us):
            break
        after += datetime.timedelta(days=1)
    return before, after

def suggest_previous_valid_date(date_obj, min_date, holidays_us):
    prev_date = date_obj - datetime.timedelta(days=1)
    while prev_date >= min_date:
        if not is_weekend(prev_date) and not is_us_holiday(prev_date, holidays_us):
            return prev_date
        prev_date -= datetime.timedelta(days=1)
    return None

def get_date_input(prompt_text, min_date, holidays_us, start_date=None):
    #session = PromptSession()
    session = PromptSession(editing_mode="VI")
    bindings = KeyBindings()

    @bindings.add('escape')
    def _(event):
        app = get_app_or_none()
        if app:
            app.exit(result="__exit__")

    try:
        while True:
            result = session.prompt(prompt_text, key_bindings=bindings)
            if result == "__exit__":
                print("\n[bold red]–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ Esc[/bold red]")
                sys.exit(0)
            date_str = result.strip()

            try:
                date_obj = datetime.datetime.strptime(date_str, "%d/%m/%Y").date()
            except ValueError:
                print("[bold red]–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ dd/mm/yyyy[/bold red]")
                continue

            today = datetime.date.today()

            if date_obj == today:
                print("[bold red]–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –æ—Ç—á–µ—Ç –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É[/bold red]")
                suggested = suggest_previous_valid_date(date_obj, min_date, holidays_us)
                if suggested:
                    print(f"[bold yellow]–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è –¥–∞—Ç–∞: {suggested.strftime('%d.%m.%Y')}[/bold yellow]")
                continue

            if date_obj > today:
                print("[bold red]–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –Ω–∞ –±—É–¥—É—â–µ–µ[/bold red]")
                suggested = suggest_previous_valid_date(today, min_date, holidays_us)
                if suggested:
                    print(f"[bold yellow]–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è –¥–∞—Ç–∞: {suggested.strftime('%d.%m.%Y')}[/bold yellow]")
                continue

            if date_obj < min_date:
                print("[bold red]–î–∞—Ç–∞ –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–¥–æ 2022 –≥–æ–¥–∞)[/bold red]")
                continue

            if start_date and date_obj <= start_date:
                print("[bold red]–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –Ω–∞—á–∞–ª—å–Ω–æ–π[/bold red]")
                continue

            if is_weekend(date_obj):
                print(f"[bold yellow]{date_obj.strftime('%d.%m.%Y')} ‚Äî –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å[/bold yellow]")
                before, after = find_nearest_valid_dates(date_obj, min_date, holidays_us)
                print(f"[bold yellow]–ë–ª–∏–∂–∞–π—à–∏–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞—Ç—ã: [/bold yellow]"
                      f"[bold cyan]{before.strftime('%d.%m.%Y')}[/bold cyan], "
                      f"[bold cyan]{after.strftime('%d.%m.%Y')}[/bold cyan]")
                continue

            if is_us_holiday(date_obj, holidays_us):
                holiday_name = holidays_us.get(date_obj)
                print(f"[bold yellow]{date_obj.strftime('%d.%m.%Y')} ‚Äî {holiday_name}[/bold yellow]")
                before, after = find_nearest_valid_dates(date_obj, min_date, holidays_us)
                print(f"[bold yellow]–ë–ª–∏–∂–∞–π—à–∏–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞—Ç—ã: [/bold yellow]"
                      f"[bold cyan]{before.strftime('%d.%m.%Y')}[/bold cyan], "
                      f"[bold cyan]{after.strftime('%d.%m.%Y')}[/bold cyan]")
                continue

            return date_obj
    except (KeyboardInterrupt, EOFError):
        print("\n[bold red]–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º[/bold red]")
        sys.exit(0)

def save_dates_to_json(start_date, end_date, path):
    data = {
        "start_date": start_date.strftime("%d.%m.%Y"),
        "end_date": end_date.strftime("%d.%m.%Y")
    }
    os.makedirs(os.path.dirname(path), exist_ok=True)
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    print(f"[bold green]–î–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {path}[/bold green]")

def main():
    print_welcome()
    print("[bold yellow]–î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C –∏–ª–∏ Esc –¥–≤–∞–∂–¥—ã üôÇ[/bold yellow]")
    min_date = datetime.date(2022, 1, 1)
    holidays_us = holidays.US(years=range(2022, datetime.date.today().year + 2))

    start_date = get_date_input("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –æ—Ç—á–µ—Ç–∞ (dd/mm/yyyy): ", min_date, holidays_us)
    print(f"[bold green]–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç—á–µ—Ç–∞: [bold cyan]{start_date.strftime('%d.%m.%Y')}[/bold cyan]")

    end_date = get_date_input("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ (dd/mm/yyyy): ", min_date, holidays_us, start_date=start_date)
    print(f"[bold green]–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: [bold cyan]{end_date.strftime('%d.%m.%Y')}[/bold cyan]")

    save_path = os.path.join("Data_work", "report_dates.json")
    save_dates_to_json(start_date, end_date, save_path)

    print("[bold magenta]\n–û—Ç—á–µ—Ç –±—É–¥–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∑–∞ –ø–µ—Ä–∏–æ–¥:[/bold magenta]")
    print(f"[bold magenta]—Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')}[/bold magenta]")

if __name__ == "__main__":
    main()

